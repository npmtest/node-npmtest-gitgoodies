{"/home/travis/build/npmtest/node-npmtest-gitgoodies/test.js":"/* istanbul instrument in package npmtest_gitgoodies */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gitgoodies/lib.npmtest_gitgoodies.js":"/* istanbul instrument in package npmtest_gitgoodies */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gitgoodies = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gitgoodies = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gitgoodies/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gitgoodies && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gitgoodies */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gitgoodies\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gitgoodies.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gitgoodies.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gitgoodies.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gitgoodies.__dirname + '/lib.npmtest_gitgoodies.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gitgoodies/node_modules/gitgoodies/lib/gg.js":"var exec = require('child_process').exec;\n\n// Force CLI coloring.\nvar Chalk = require('chalk');\nvar chalk = new Chalk.constructor({\n  enabled: true\n});\n\n// Output styling.\nvar success = chalk.green;\nvar notice = chalk.yellow;\nvar whoops = chalk.bold.red; // Can't name error as exec uses error in callback.\nvar underline = chalk.underline;\n\n// Operating system.\nvar isWindows = /^win/.test(process.platform);\n\nexports.version = function() {\n  var package = require('../package.json');\n  var version = package.version;\n\n  console.log(success('gg') + ' version ' + notice(version));\n\n  exports.upToDate(true, false);\n};\n\nexports.upToDate = function(reportOnTrue, reportOnFalse) {\n  var package = require('../package.json');\n  var currentVersion = package.version;\n\n  var latestVersion = require('latest-version');\n  latestVersion('gitgoodies', function(err, version) {\n    if (version !== currentVersion) { // Not up to date.\n      if (reportOnFalse) {\n        console.log();\n        console.log(notice('[~] This version of gg is not up-to-date.') + ' ' + chalk.yellow('Update with ' + chalk.bold('npm update -g gitgoodies') + '.'));\n      }\n    } else {\n      if (reportOnTrue) {\n        console.log();\n        console.log(success('[✔] This version of gg is up-to-date.'));\n      }\n    }\n  });\n};\n\nexports.init = function() {\n  exec('git init', function(error, stdout, stderr) {\n    if (stdout.substring(0, 13) === 'Reinitialized') {\n      console.log(notice('[~] Reinitialized existing Git repository.'));\n    } else {\n      console.log(success('[✔] Initialized new Git repository.'));\n    }\n  });\n};\n\nexports.ignore = function(template) {\n  var request = require('request');\n  var fs = require('fs');\n\n  if (template === '' || typeof template === 'undefined') {\n    request('https://www.gitignore.io/api/list', function(error, response, body) {\n      console.log('|- ' + body.replace(new RegExp(','.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, '\\\\$1'), 'g'), '\\n|- '));\n\n      console.log(notice('[~] You must enter one of the templates or languages listed above.'));\n    });\n  } else {\n    request('https://www.gitignore.io/api/' + template, function(error, response, body) {\n      if (body.split('\\n')[2].substring(0, 10) === '#!! ERROR:') { // Template doesn't exist.\n        request('https://www.gitignore.io/api/list', function(error, response, body) {\n          console.log('|- ' + body.replace(new RegExp(','.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, '\\\\$1'), 'g'), '\\n|- '));\n\n          console.log(whoops('[✖] Template ' + template + ' does not exist. '));\n          console.log(notice('[~] You must enter one of the templates or languages listed above.'));\n        });\n      } else { // Does exist!\n        fs.appendFile('.gitignore', body, function(err) {\n          if (err) {\n            console.log(whoops('[✖] Could not create .gitignore for ' + template + '.'));\n          } else {\n            console.log(success('[✔] Created .gitignore for ' + template + '!'));\n          }\n        });\n      }\n    });\n  }\n};\n\nexports.clone = function(repository) {\n  // Nothing to clone.\n  if (repository === '' || typeof repository === 'undefined') {\n    console.log(notice('[~] You must enter a repository URL or GitHub project (username/repository).'));\n  } else {\n    exec('git clone ' + repository, function(error, stdout, stderr) {\n      if (stderr.substring(0, 7) === 'Cloning') {\n        if (stderr.split('\\n')[1].split(' ')[0] === 'fatal:') {\n          console.log(whoops('[✖] Could not clone repository.'));\n        } else {\n          console.log(success('[✔] Cloned into ' + stderr.split('\\n')[0].split(' ')[2]));\n        }\n      } else {\n        if (stderr.substring(0, 23) === 'fatal: destination path') {\n          console.log(notice('[~] Directory ' + stderr.split(' ')[3] + ' is not empty.'));\n        } else {\n          console.log(whoops('[✖] Could not clone repository.'));\n        }\n      }\n    });\n  }\n};\n\nexports.cloneGitHub = function(repository) {\n  if (repository === '' || typeof repository === 'undefined') {\n    exports.clone(repository);\n  } else {\n    exports.clone('https://github.com/' + repository + '.git');\n  }\n};\n\nexports.addAll = function() {\n  exec('git add -A');\n\n  console.log(success('[✔] Added everything!'));\n};\n\nexports.addSingle = function(target) {\n  // TODO: Fix the Error handling! Currently just ignores warnings\n  exec('git add ' + target, function(error, stdout, stderr) {\n    if (typeof target === 'undefined') {// Then just add all.\n      exports.addAll();\n    } else {\n      if (stderr.substring(0, 5) === 'fatal') {\n        console.log(whoops('[✖] Could not add target specified. ') + chalk.red('Are you sure the target exists?'));\n      } else {\n        console.log(success('[✔] Added ' + target + '!'));\n      }\n    }\n  });\n};\n\nexports.addOptions = function(options, target) {\n  // TODO: Fix the Error Handling! Currently just ignores warnings\n  exec('git add -' + options + ' ' + target, function(error, stdout, stderr) {\n    if (typeof target === 'undefined') {// Then just add all.\n      exports.addAll();\n    } else {\n      if (stderr.substring(0, 5) === 'fatal') {\n        console.log(whoops('[✖] Could not add target specified. ') + chalk.red('Are you sure the target exists?'));\n      } else {\n        console.log(success('[✔] Added ' + target + '!'));\n      }\n    }\n  });\n};\n\nexports.commit = function(message, addAll) {\n  // No commit message.\n  if (message === '' || typeof message === 'undefined') {\n    console.log(notice('[~] You must enter a commit message.'));\n  } else {\n    if (addAll) {\n      exports.addAll();\n    }\n\n    exec('git commit -m \"' + message + '\"', function(error, stdout, stderr) {\n      if (stdout.substring(0, 1) === '[') {\n        console.log(success('[✔] Committed!'));\n\n        console.log();\n        console.log('\"' + underline(message) + '\"');\n      } else if (stdout.substring(0, 2) === 'On') {\n        console.log(notice('[~] Everything already committed.'));\n      } else {\n        console.log(whoops('[✖] Could not commit changes.') + chalk.red(' Try again if there was a large amount of changes to add.'));\n      }\n    });\n  }\n};\n\nexports.push = function() {\n  exec('git push', function(error, stdout, stderr) {\n    if (stderr.split('\\n')[0] === 'Everything up-to-date') {\n      console.log(notice('[~] All commits already pushed.'));\n    } else {\n      if (stderr.split('\\n')[1].split(' ')[0] === 'fatal:') {\n        if (stderr.split('\\n')[1].substring(0, 23) === 'fatal: unable to access') {\n          console.log(whoops('[✖] Unable to access remote repository due to insufficient permissions.'));\n        } else {\n          console.log(whoops('[✖] Could not push commits.'));\n        }\n      } else if (stderr.split('\\n')[0].split(' ')[0] === 'To') {\n        if (stderr.split('\\n')[1].split(' ')[1] === '!') { // Need to pull first.\n          // TODO: add handling for non-fast-forwards (when you need to pull first, merge, and then push).\n          console.log(notice('[~] Push rejected! Pull changes from remote first.'));\n        } else {\n          console.log(success('[✔] Pushed!'));\n        }\n      } else if (stderr.split('\\n')[0].substring(0, 30) === 'warning: push.default is unset') {\n        if (stderr.split('\\n')[21] === 'Everything up-to-date') {\n          console.log(notice('[~] All commits already pushed.'));\n        } else {\n          if (stderr.split('\\n')[22].split(' ')[0] === 'fatal:') {\n            if (stderr.split('\\n')[22].substring(0, 23) === 'fatal: unable to access') {\n              console.log(whoops('[✖] Unable to access remote repository due to insufficient permissions.'));\n            } else {\n              console.log(whoops('[✖] Could not push commits.'));\n            }\n          } else if (stderr.split('\\n')[21].split(' ')[0] === 'To') {\n            if (stderr.split('\\n')[22].split(' ')[1] === '!') { // Need to pull first.\n              // TODO: add handling for non-fast-forwards (when you need to pull first, merge, and then push).\n              console.log(notice('[~] Push rejected! Pull changes from remote first.'));\n            } else {\n              console.log(success('[✔] Pushed!'));\n            }\n          } else { // Generic error.\n            console.log(whoops('[✖] Could not push commits.'));\n          }\n        }\n      } else { // Generic error.\n        console.log(whoops('[✖] Could not push commits.'));\n      }\n    }\n  });\n};\n\nexports.pull = function() {\n  exec('git pull', function(error, stdout, stderr) {\n    if (stdout.substring(0, 7) === 'Already') {\n      console.log(notice('[~] Everything is already up-to-date.'));\n    } else if (stdout.substring(0, 8) === 'Updating') {\n      if (stdout.split('\\n')[1] === 'error: Your local changes to the following files would be overwritten by merge:') {\n        console.log(whoops('[✖] Could not pull commits.') + chalk.red(' (may have to pull using the ') + chalk.red.underline('standard git command') + chalk.red(' to handle merge conflicts.)'));\n      } else {\n        console.log(success('[✔] Pulled!'));\n      }\n    } else {\n      // TODO: add handling for merge conflicts.\n      console.log(whoops('[✖] Could not pull commits.') + chalk.red(' (may have to pull using the ') + chalk.red.underline('standard git command') + chalk.red(' to handle merge conflicts.)'));\n    }\n  });\n};\n\nexports.fetch = function() {\n  exec('git fetch', function(error, stdout, stderr) {\n    if (stdout === '' && stderr === '') {\n      console.log(success('[✔] Fetched!'));\n    } else {\n      console.log(whoops('[✖] Could not fetch commits.'));\n    }\n  });\n};\n\nexports.fetchAll = function() {\n  exec('git fetch --all', function(error, stdout, stderr) {\n    if (stderr === '') {\n      console.log(success('[✔] Fetched all!'));\n    } else {\n      console.log(whoops('[✖] Could not fetch commits.'));\n    }\n  });\n};\n\nexports.status = function() {\n  exec('git status', function(error, stdout, stderr) {\n    var status = stdout.split('\\n');\n\n    // Branch.\n    var branch;\n    if (status[0].split(' ')[0] === 'HEAD') { // If HEAD is at a commit.\n      branch = chalk.dim('branch  ') + chalk.gray.dim(' | ') + success(status[0].split(' ')[3]);\n    } else {\n      branch = chalk.dim('branch  ') + chalk.gray.dim(' | ') + success(status[0].split(' ')[2]);\n    }\n\n    console.log(branch);\n\n    // Position in branch.\n    var position;\n    switch (status[1].split(' ')[3]) {\n      case 'behind':\n        position = 'position' + chalk.gray.dim(' | ') + notice(status[1].split(' ')[7] + ' commits behind (fetch or pull)');\n        break;\n\n      case 'for': // Quick hack to get it working when changes are not staged.\n      case 'working': // Quick hack to get it working with freshly initialized git repositories.\n      case 'up-to-date':\n        position = chalk.dim('position') + chalk.gray.dim(' | ') + success('up-to-date');\n        break;\n\n      case 'ahead':\n        position = 'position' + chalk.gray.dim(' | ') + notice(status[1].split(' ')[7] + ' commits ahead (push commits)');\n        break;\n\n      default:\n        // TODO: add proper handling for freshly initialized git repositories.\n        if (typeof status[1].split(' ')[3] === 'undefined') { // Quick hack to get it working with freshly initialized git repositories.\n          position = chalk.dim('position') + chalk.gray.dim(' | ') + success('up-to-date');\n        } else if (status[1] === 'Changes to be committed:') {\n          position = chalk.dim('position') + chalk.gray.dim(' | ') + success('up-to-date');\n        } else {\n          position = 'position' + chalk.gray.dim(' | ') + whoops('diverged');\n        }\n    }\n    console.log(position);\n\n    console.log();\n\n    // Staging.\n    var staging;\n    if (status[2] === 'Initial commit') { // Fresh repository.\n      switch (status[4]) {\n        case 'Untracked files:':\n          staging = 'staging ' + chalk.gray.dim(' | ') + notice('not all changes staged (add all changes)');\n          break;\n\n        case 'Changes to be committed:':\n        case 'nothing to commit (create/copy files and use \"git add\" to track)':\n          staging = chalk.dim('staging ') + chalk.gray.dim(' | ') + success('all changes staged');\n          break;\n      }\n    } else if (status[1].substring(0, 14) === 'Your branch is') { // There's a remote origin.\n      if (status[2] === '  (use \"git pull\" to update your local branch)' || status[2] === '  (use \"git push\" to publish your local commits)') {\n        switch (status[4]) {\n          case 'Changes not staged for commit:':\n          case 'Untracked files:':\n            staging = 'staging ' + chalk.gray.dim(' | ') + notice('not all changes staged (add all changes)');\n            break;\n\n          case 'Changes to be committed:':\n          case 'nothing to commit, working directory clean':\n            staging = chalk.dim('staging ') + chalk.gray.dim(' | ') + success('all changes staged');\n            break;\n        }\n      } else {\n        if (status[2] === '') {\n          switch (status[3]) {\n            case 'Changes not staged for commit:':\n            case 'Untracked files:':\n              staging = 'staging ' + chalk.gray.dim(' | ') + notice('not all changes staged (add all changes)');\n              break;\n\n            case 'Changes to be committed:':\n            case 'nothing to commit, working directory clean':\n              staging = chalk.dim('staging ') + chalk.gray.dim(' | ') + success('all changes staged');\n              break;\n          }\n        } else {\n          switch (status[2]) {\n            case 'Changes not staged for commit:':\n            case 'Untracked files:':\n              staging = 'staging ' + chalk.gray.dim(' | ') + notice('not all changes staged (add all changes)');\n              break;\n\n            case 'Changes to be committed:':\n            case 'nothing to commit, working directory clean':\n              staging = chalk.dim('staging ') + chalk.gray.dim(' | ') + success('all changes staged');\n              break;\n          }\n        }\n      }\n    } else { // No remote.\n      switch (status[1]) {\n        case 'Changes not staged for commit:':\n        case 'Untracked files:':\n          staging = 'staging ' + chalk.gray.dim(' | ') + notice('not all changes staged (add all changes)');\n          break;\n\n        case 'Changes to be committed:':\n        case 'nothing to commit, working directory clean':\n          staging = chalk.dim('staging ') + chalk.gray.dim(' | ') + success('all changes staged');\n          break;\n      }\n    }\n\n    console.log(staging);\n\n    // Commits.\n    var commits;\n    if (status[2] === 'Initial commit') {\n      switch (status[4]) {\n        case 'Changes to be committed:':\n          commits = 'commits ' + chalk.gray.dim(' | ') + notice('not all changes committed (commit all changes)');\n          break;\n\n        case 'nothing to commit (create/copy files and use \"git add\" to track)':\n          commits = chalk.dim('commits ') + chalk.gray.dim(' | ') + success('all changes committed');\n          break;\n\n        default:\n          commits = chalk.dim('commits ') + chalk.gray.dim(' | ') + success('all changes committed');\n      }\n    } else if (status[1].substring(0, 14) === 'Your branch is') { // There's a remote origin.\n      if (status[2] === '  (use \"git pull\" to update your local branch)' || status[2] === '  (use \"git push\" to publish your local commits)') {\n        switch (status[4]) {\n          case 'Changes not staged for commit:':\n          case 'nothing to commit, working directory clean':\n            commits = chalk.dim('commits ') + chalk.gray.dim(' | ') + success('all changes committed');\n            break;\n\n          case 'Changes to be committed:':\n            commits = 'commits ' + chalk.gray.dim(' | ') + notice('not all changes committed (commit all changes)');\n            break;\n\n          default:\n            commits = chalk.dim('commits ') + chalk.gray.dim(' | ') + success('all changes committed');\n        }\n      } else {\n        if (status[2] === '') {\n          switch (status[3]) {\n            case 'Changes not staged for commit:':\n            case 'nothing to commit, working directory clean':\n              commits = chalk.dim('commits ') + chalk.gray.dim(' | ') + success('all changes committed');\n              break;\n\n            case 'Changes to be committed:':\n              commits = 'commits ' + chalk.gray.dim(' | ') + notice('not all changes committed (commit all changes)');\n              break;\n\n            default:\n              commits = chalk.dim('commits ') + chalk.gray.dim(' | ') + success('all changes committed');\n          }\n        } else {\n          switch (status[2]) {\n            case 'Changes not staged for commit:':\n            case 'nothing to commit, working directory clean':\n              commits = chalk.dim('commits ') + chalk.gray.dim(' | ') + success('all changes committed');\n              break;\n\n            case 'Changes to be committed:':\n              commits = 'commits ' + chalk.gray.dim(' | ') + notice('not all changes committed (commit all changes)');\n              break;\n\n            default:\n              commits = chalk.dim('commits ') + chalk.gray.dim(' | ') + success('all changes committed');\n          }\n        }\n      }\n    } else {\n      switch (status[1]) {\n        case 'Changes not staged for commit:':\n        case 'nothing to commit, working directory clean':\n          commits = chalk.dim('commits ') + chalk.gray.dim(' | ') + success('all changes committed');\n          break;\n\n        case 'Changes to be committed:':\n          commits = 'commits ' + chalk.gray.dim(' | ') + notice('not all changes committed (commit all changes)');\n          break;\n\n        default:\n          commits = chalk.dim('commits ') + chalk.gray.dim(' | ') + success('all changes committed');\n      }\n    }\n\n    console.log(commits);\n  });\n};\n\nexports.log = function(file) {\n  var fileName = '';\n  var fs = require('fs');\n  var logCommand;\n\n  if (typeof file !== 'undefined' && file !== '') {\n    // Testing if the file exists\n    try {\n      // Trying to open the file\n      fs.openSync(file, 'r');\n    } catch (ENOENT) {\n      // If the file does not exist, we tell the user.\n      console.log(whoops('[✖] File ' + file + ' does not exist. '));\n      return;\n    } finally {\n      // We might have other read/write permission errors, etc.\n      // But this is not what we are looking for\n      // So ending here is good to continue, and we can process the git command\n      fileName = ' ' + file;\n    }\n  }\n\n  if (isWindows) {\n    exec('git log --pretty=format:{^|commit^|:^|%H^|,%n^|author^|:^|%an:%ae^|,%n^|date^|:^|%ad^|,%n^|message^|:^|%f^|},' + fileName, function(error, stdout, stderr) {\n      stdout = '[' + stdout.replace(/\\|/g, '\"').slice(0, -1) + ']';\n\n      if (stdout === '[]\\n') { // No commits, so empty array is returned.\n        console.log(notice('[~] No commits... yet! Commit with the \\'gg c\\' command.'));\n      }\n\n      var log = JSON.parse(stdout);\n      log.reverse(); // Show newest at the bottom.\n\n      for (var i = 0; i < log.length; i++) {\n        console.log(); // New line between each commit.\n\n        console.log(notice('[' + log[i].commit + ']'));\n\n        var author = {\n          name: log[i].author.split(':')[0].trim(),\n          email: '<' + log[i].author.split(':')[1] + '>'\n        };\n\n        console.log('|- ' + chalk.gray(author.name) + ' ' + chalk.gray.dim(author.email));\n        console.log('|- ' + chalk.gray.dim(log[i].date));\n        console.log('|- ' + chalk.green(log[i].message.split('-').join(' ')));\n      }\n    });\n  } else {\n    // https://gist.github.com/textarcana/1306223\n    exec('git log --pretty=format:\\'{%n  \"commit\": \"%H\",%n  \"author\": \"%an <%ae>\",%n  \"date\": \"%ad\",%n  \"message\": \"%f\"%n},\\'' + fileName + ' $@ | perl -pe \\'BEGIN{print \"[\"}; END{print \"]\\n\"}\\' | perl -pe \\'s/},]/}]/\\'', function(error, stdout, stderr) {\n      if (stdout === '[]\\n') { // No commits, so empty array is returned.\n        console.log(notice('[~] No commits... yet! Commit with the \\'gg c\\' command.'));\n      }\n\n      var log = JSON.parse(stdout);\n      log.reverse(); // Show newest at the bottom.\n\n      for (var i = 0; i < log.length; i++) {\n        console.log(); // New line between each commit.\n\n        console.log(notice('[' + log[i].commit + ']'));\n\n        var author = {\n          name: log[i].author.split('<')[0].trim(),\n          email: '<' + log[i].author.split('<')[1]\n        };\n\n        console.log('|- ' + chalk.gray(author.name) + ' ' + chalk.gray.dim(author.email));\n        console.log('|- ' + chalk.gray.dim(log[i].date));\n        console.log('|- ' + chalk.green(log[i].message.split('-').join(' ')));\n      }\n    });\n  }\n};\n\nexports.branch = function(name) {\n  if (name === '' || typeof name === 'undefined') { // List branches.\n    exec('git branch', function(error, stdout, stderr) {\n      if (stdout === '') {\n        console.log(notice('[~] No branches exist.'));\n      }\n\n      var branches = stdout.split('\\n');\n      for (var i = 0; i < branches.length - 1; i++) {\n        if (branches[i].substring(0, 1) === '*') { // Current branch.\n          console.log('|- ' + success.bold(branches[i].substring(2)));\n        } else {\n          console.log(chalk.dim('|- ' + branches[i].substring(2)));\n        }\n      }\n    });\n  } else { // Create branch and checkout.\n    exec('git branch ' + name, function(error, stdout, stderr) {\n      if (stderr.split(' ')[0] === 'fatal:') {\n        if (stderr.substring(0, 21) === 'fatal: A branch named') { // Branch already exists.\n          console.log(notice('[~] Branch \\'' + name + '\\' already exists.'));\n\n          // Checkout branch.\n          exports.checkout(name);\n        } else if (stderr.slice(-24) === 'not a valid branch name.') { // Invalid branch name.\n          console.log(notice('[~] \\'' + name + '\\' is an invalid branch name.'));\n        } else if (stderr.substring(7, 30) === 'Not a valid object name') { // No branches exist.\n          console.log(notice('[~] No branches exist.'));\n        } else { // Generic error.\n          console.log(whoops('[✖] Could not create new branch \\'' + name + '\\'.'));\n        }\n      } else {\n        console.log(success('[✔] Created new branch \\'' + name + '\\'!'));\n\n        // Switch to new branch.\n        exports.checkout(name);\n      }\n    });\n  }\n};\n\nexports.checkout = function(branch) {\n  if (branch === '' || typeof branch === 'undefined') { // If no branch provided, list the branches.\n    exports.branch();\n  } else {\n    exec('git checkout ' + branch, function(error, stdout, stderr) {\n      switch (stderr.split(' ')[0]) {\n        case 'Already':\n          console.log(notice('[~] Already on branch \\'' + branch + '\\'.'));\n          break;\n\n        case 'Switched':\n          console.log(success('[✔] Switched to branch \\'' + branch + '\\'!'));\n          break;\n\n        case 'error:': // Branch does not exist.\n          console.log(notice('[~] Branch \\'' + branch + '\\' doesn\\'t exist.'));\n          console.log();\n\n          exports.branch(branch);\n          break;\n\n        case 'fatal':\n          console.log(notice('[~] No branches exist.'));\n          break;\n      }\n    });\n  }\n};\n\nexports.repoCheck = function(callback) {\n  exec('git rev-parse', function(error, stdout, stderr) {\n    if (stderr.length === 0) {\n      return callback();\n    }\n    console.log(whoops('[✖] Not in a valid git repository! Run \"gg i\" to initialise one.'));\n  });\n};\n"}